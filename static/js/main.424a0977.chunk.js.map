{"version":3,"sources":["containers/LoginForm.js","utils/constants.js","containers/ForgotPassword.js","App.js","reportWebVitals.js","index.js"],"names":["LoginForm","props","SIGN_IN_LABEL","EMAIL","PASSWORD","REMEMBER_ME","useState","email","setEmail","password","setPassword","validEmail","setValidEmail","validPwd","setValidPwd","onChange","e","target","name","value","length","onInputBlur","isValidEmail","input","test","clearValues","className","aria-label","htmlFor","type","id","onBlur","tabIndex","onClick","axios","post","pwd","then","response","console","log","catch","error","window","alert","history","push","ForgotPassword","App","basename","location","pathname","exact","path","component","to","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.424a0977.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\n\r\nimport './LoginForm.scss'\r\nimport * as constants from '../utils/constants'\r\n\r\nimport axios from 'axios'\r\n\r\n/* Login Form for the application */\r\nconst LoginForm = (props) => {\r\n    const { SIGN_IN_LABEL, EMAIL, PASSWORD, REMEMBER_ME, FORGOT_PASSWORD, NO_ACCOUNT_LABEL, SIGN_UP, RESEND_EMAIL, EMAIL_ERROR_MSG, PWD_ERROR_MSG, NETWORK_ISSUE } = constants\r\n    const [ email, setEmail ] = useState('')\r\n    const [ password, setPassword ] = useState('')\r\n    const [ validEmail, setValidEmail ] = useState(true)\r\n    const [ validPwd, setValidPwd ] = useState(true)\r\n\r\n    // setting the email and password field values on input change event\r\n    const onChange = (e) => {\r\n        if(e.target.name === 'email'){\r\n            setEmail(e.target.value)\r\n        }else {\r\n            setPassword(e.target.value)\r\n            setValidPwd(e.target.value.length > 0)\r\n        }\r\n    }\r\n\r\n    // validating the email and password fields length on input blur event\r\n    const onInputBlur = (e) => {\r\n        if(e.target.name === 'email'){\r\n            setValidEmail(isValidEmail(email) && email.length > 0)\r\n        }else if(e.target.name === 'password'){\r\n            setValidPwd(password.length > 0)\r\n        }\r\n    }\r\n\r\n    //validate the email entered\r\n    const isValidEmail = (input) => {\r\n        const emailRegEx = /(\\w\\.?)+@[\\w\\.-]+\\.\\w{2,4}/\r\n        return emailRegEx.test(input)\r\n    }\r\n\r\n    // send the request to the server with email and password values on 'Sign in' button click\r\n    const onSignInBtnClick = () => {\r\n        if(email.length === 0){\r\n            setValidEmail(isValidEmail(email) || false)\r\n        }\r\n        if(password.length === 0){\r\n            setValidPwd(false)\r\n        }\r\n        validEmail && validPwd && axios.post('http://localhost:8000/api/login', {\r\n            email: email,\r\n            pwd: password\r\n          })\r\n          .then(function (response) {\r\n            console.log(response);\r\n            clearValues()\r\n          })\r\n          .catch(function (error) {\r\n            console.log(error);\r\n            window.alert(NETWORK_ISSUE)\r\n            clearValues()\r\n          });\r\n    }\r\n\r\n    // Clear the values after clicking on sign in button\r\n    const clearValues = () => {\r\n        setEmail('')\r\n        setPassword('')\r\n    }\r\n\r\n    //Redirect to forgot password page\r\n    const onForgotPwdClick = () => {\r\n        props.history.push('/forgot_password')\r\n    }\r\n\r\n    return (\r\n        <div className=\"outer-wrapper\">\r\n            <div className='login-form-wrapper'>\r\n                <h2 className='sign-in-label'>{SIGN_IN_LABEL}</h2>\r\n                <div className='email'>\r\n                    <label aria-label={EMAIL} htmlFor=\"email\"><h3>{EMAIL}</h3></label>\r\n                    <input type=\"text\" id=\"email\" name=\"email\" onChange={onChange} onBlur={onInputBlur} value={email} tabIndex=\"0\"></input>\r\n                    {!validEmail && <p className='error-msg' tabIndex=\"0\">{EMAIL_ERROR_MSG}</p>}\r\n                </div>\r\n                <div className='password'>\r\n                    <label  aria-label={PASSWORD} htmlFor=\"password\"><h3>{PASSWORD}</h3></label>\r\n                    <input type=\"password\" id=\"password\" name=\"password\" onChange={onChange} onBlur={onInputBlur} value={password} tabIndex=\"0\"></input>\r\n                    {!validPwd && <p className='error-msg' tabIndex=\"0\">{PWD_ERROR_MSG}</p>}\r\n                </div>\r\n                <div className='remember-me-wrapper'>\r\n                    <span><input type='checkbox' id=\"rememberMe\" className='remember-chkbox' tabIndex=\"0\"></input></span>\r\n                    <span><label className='remember-me-label'  aria-label={REMEMBER_ME} htmlFor=\"rememberMe\">{REMEMBER_ME}</label></span>\r\n                </div>\r\n                <button className='sign-in-btn' onClick={onSignInBtnClick} tabIndex=\"0\">{SIGN_IN_LABEL}</button>\r\n                <div className='links'>\r\n                    <button tabIndex=\"0\" onClick={onForgotPwdClick}>{FORGOT_PASSWORD}</button>\r\n                    <span className='child-links'><label tabIndex=\"0\">{NO_ACCOUNT_LABEL}</label>\r\n                        <button tabIndex=\"0\">{SIGN_UP}</button>\r\n                        </span>\r\n                    <button tabIndex=\"0\" className='child-links'>{RESEND_EMAIL}</button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default LoginForm","/* All the constants for the application will be declared here */\r\n\r\nexport const SIGN_IN_LABEL = 'Sign in'\r\nexport const EMAIL = 'Email'\r\nexport const PASSWORD = 'Password'\r\nexport const REMEMBER_ME = 'Remember me?'\r\nexport const FORGOT_PASSWORD = 'Forgot your password?'\r\nexport const NO_ACCOUNT_LABEL = \"Don't have an account?\"\r\nexport const SIGN_UP = 'Sign up'\r\nexport const RESEND_EMAIL = 'Resend email confirmation'\r\nexport const EMAIL_ERROR_MSG = 'Please enter a vaild Email Id'\r\nexport const PWD_ERROR_MSG = 'Please enter a vaild Password'\r\nexport const NETWORK_ISSUE = 'Something went wrong, Please try again'","import React from 'react'\r\n\r\nconst ForgotPassword = () => {\r\n    return (\r\n        <div>\r\n            Forgot Password Page\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ForgotPassword","import './App.css'\r\nimport { Route, Switch, BrowserRouter, Redirect } from 'react-router-dom';\r\n\r\nimport LoginForm from './containers/LoginForm'\r\nimport ForgotPassword from './containers/ForgotPassword'\r\n\r\nfunction App() {\r\n  return (\r\n    <BrowserRouter basename={window.location.pathname || ''}>\r\n      <Switch>\r\n        <Route exact path='/login' component={LoginForm} />\r\n        <Route exact path='/forgot_password' component={ForgotPassword} />\r\n        <Route exact path=\"/\">\r\n          <Redirect to=\"/login\" />\r\n        </Route>\r\n      </Switch>\r\n    </BrowserRouter>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}